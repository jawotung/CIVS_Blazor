@page "/group-access/details/{Id}"
@using Application.Models
@using WebAPI

<h3>Group Access Details</h3>
<div class="col-lg-12">
    <div class="row">
        <div class="col-sm-3">
            <div class="fw-bold">Group</div>
            <div class="fw-bold">Menu Access</div>
            <div class="fw-bold">Deleted</div>
        </div>
        <div class="col-sm-9 display-block">
            <div class="">@GroupAccessModel.GroupDesc</div>
            <div class="">@GroupAccessModel.MenuIDsDesc</div>
            <div class="">
                <input class="form-check-input" type="checkbox" value="@GroupAccessModel.Isdeleted" checked="@GroupAccessModel.Isdeleted" disabled>
            </div>
        </div>
    </div>
</div>
<div class="mt-3">
    <a class="btn btn-link" href="/group-access">Back to list</a>
    <a class="btn btn-link" href="/group/details/@Id">Back to group</a>
</div>

<LoadingModal @ref="MdlLoading" IsLoading="isLoading"></LoadingModal>
<Toast @ref="Msg"></Toast>
@code {
    [Parameter]
    public string Id { get; set; }

    GroupAccessModel GroupAccessModel = new();
    private LoadingModal MdlLoading;
    private bool isLoading = false;
    ReturnGenericStatus message = new();
    private Toast Msg { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Initialize();
    }

    protected async Task Initialize()
    {
        string token = await GetAuth();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var result = await GroupAccessServices.GroupAccessDetails(int.Parse(Id));
        if (result.StatusCode == "00")
        {
            GroupAccessModel = result.Data;
            StateHasChanged();
            isLoading = false;
        }
        else
        {
            message.StatusCode = result.StatusCode;
            message.StatusMessage = result.StatusMessage;
            Msg.ShowMsg(message);
        }
        isLoading = false;
    }

    private async Task<string> GetAuth()
    {
        return await localStorageService.GetItemAsStringAsync("auth")!;
    }
}
