@page "/group"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization

@using Application.Models
@using NetcodeHub.Packages.Components.Validations.OnInput
@using WebAPI
@using System.IO
@inject IJSRuntime JSRuntime

<h3>GroupList</h3>

<div class="row">
    <div class="col-2">
        <button class="btn btn-success w-100 btn-sm" type="button" @onclick="() => ShowAddModal()"><i class="fa fa-plus"></i> Add</button>
    </div>
    <div class="col-2">
        <button class="btn btn-warning w-100 btn-sm" type="button" @onclick="() => OnClickPrint()"><i class="fa fa-print"></i> Print</button>
    </div>
    <div class="col-2">
        <button class="btn btn-warning w-100 btn-sm" type="button" @onclick="() => OnClickPrintMatrix()"><i class="fa fa-print"></i> Print Matrix</button>
    </div>
</div>
<div class="table-responsive-vh">
    <table class="table table-striped table-hover table-bordered ">
        <thead>
            <tr class="table-dark">
                <th style="width: 30%;">Group Code</th>
                <th style="width: 40%;">Group Desc</th>
                <th style="width: 12%;">Deleted</th>
                <th style="width: 18%;">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in groups)
            {
                <tr>
                    <td style="width: 30%;">@group.GroupCode</td>
                    <td style="width: 40%;">@group.GroupDesc</td>
                    <td style="width: 12%;">
                        <input class="form-check-input" type="checkbox" value="@group.Isdeleted" checked="@group.Isdeleted" disabled>
                    </td>
                    <td style="width: 18%;">
                        <button type="button" class="btn btn-sm btn-success" @onclick="() => OnClickView(group)"><i class="fa fa-eye"></i></button>
                        @if (group.Isdeleted == false)
                        {
                            <button type="button" class="btn btn-sm btn-info" @onclick="() => OnClickEdit(group)"><i class="fa fa-edit"></i></button>
                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => DeleteConfirmation(group.Id)"><i class="fa fa-trash"></i></button>
                        }
                    </td>
                </tr>
            }
        </tbody>
        </table>
</div>

<UIPagination CurrentPage="page"
                TotalPages="Paginated.TotalPages"
                HasPreviousPage="Paginated.HasPreviousPage"
                HasNextPage="Paginated.HasNextPage"
                CountData="Paginated.CountData"
                OnPageChanged="Initialize" />

<UIModal Title="@(addState ? "Group Create" : "Group Edit")" ModalSize="modal-md" @ref="uiSaveModal">
    <EditForm Model="GroupModel" OnValidSubmit="SubmitGroup">
        <DataAnnotationsValidator />
        <div class="col-lg-12">
            <label for="basic-url" class="form-label">Group Code <span class="text-danger">*</span></label>
            <Text @bind-Value="GroupModel.GroupCode" aria-label="Group Code" Type="text" class="form-control mb-3" disabled="@(!addState)" />
            <label for="basic-url" class="form-label">Group Desc <span class="text-danger">*</span></label>
            <Text @bind-Value="GroupModel.GroupDesc" aria-label="Group Desc" Type="text" class="form-control mb-3" />
        </div>
        <div class="mt-3">
            <button type="submit" class="btn btn-primary">@(addState ? "Create" : "Save")</button>
        </div>
    </EditForm>
</UIModal>

<ConfirmationToast @ref="Confirmation"
                   ConfimationMsg="@ConfimationMsg"
                   OnConfirm="OnClickDelete"
                   IsVisible="@IsConfirmationModalVisible">
</ConfirmationToast>
<LoadingModal @ref="MdlLoading" IsLoading="isLoading"></LoadingModal>
<Toast @ref="Msg"></Toast>

@code {
    private LoadingModal MdlLoading;
    private UIModal uiSaveModal;
    private Toast Msg { get; set; }
    private List<GroupModel> groups = new List<GroupModel>();
    private PaginatedOutputServices<GroupModel> Paginated = new();
    GroupModel GroupModel = new();

    private int page = 1;
    private bool addState = true;
    private ConfirmationToast Confirmation { get; set; }
    private bool IsConfirmationModalVisible = false;
    private string ConfimationMsg = string.Empty;
    private bool isLoading = true;
    private int SelectedID;


    private void ShowAddModal()
    {
        addState = true;
        GroupModel = new();
        uiSaveModal.ShowModal();
    }

    private void OnClickEdit(GroupModel detail)
    {
        addState = false;
        GroupModel.Id = detail.Id;
        GroupModel.GroupCode = detail.GroupCode;
        GroupModel.GroupDesc = detail.GroupDesc;
        uiSaveModal.ShowModal();
    }

    private void DeleteConfirmation(int id)
    {
        ConfimationMsg = "";
        SelectedID = id;
        ConfimationMsg = "Are you sure you want to delete this?";
        IsConfirmationModalVisible = true;
    }

    private async void OnClickDelete(bool IsConfirmed)
    {
        if (IsConfirmed)
        {
            isLoading = true;
            string token = await GetAuth();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var result = await GroupServices.GroupDeleteConfirmed(SelectedID);
            Msg.ShowMsg(result);
            if (result.StatusCode == "00")
                await Initialize(page);
            else
                isLoading = false;
        }
        IsConfirmationModalVisible = false;
        SelectedID = 0;
    }

    protected async void OnClickView(GroupModel detail)
    {
        NavManager.NavigateTo($"/group/details/{detail.Id}");
    }

    async Task Initialize(int Page)
    {
        page = Page;
        addState = true;
        string token = await GetAuth();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        Paginated = await GroupServices.GetGroup(Page);
        groups = Paginated.Data;
        isLoading = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        // var authenticationState = await AuthStateProvider.GetAuthenticationStateAsync();
        // var user = authenticationState.User;

        // var hasRequiredRole = user.IsInRole("Admin");

        // string[] roles = ["Administration", "Branch Approval"];
        // await AuthzService.CheckAuthorization(AuthStateProvider, NavManager, roles, "/home");

        isLoading = true;
        await Initialize(page);
    }

    async Task SubmitGroup()
    {
        string token = await GetAuth();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        isLoading = true;
        if (addState)
        {
            GroupModel.Id = 0;
            GroupModel.Isdeleted = false;
            var result = await GroupServices.GroupCreate(GroupModel);
            Msg.ShowMsg(result);
            if (result.StatusCode == "00")
            {
                Initialize(page);
                uiSaveModal.CloseModal();
            }
            else
                isLoading = false;
        }
        else
        {   
            var result = await GroupServices.GroupEdit(GroupModel.Id, GroupModel);
            Msg.ShowMsg(result);
            if (result.StatusCode == "00")
            {
                GroupModel.Id = 0;
                GroupModel.Isdeleted = false;
                GroupModel.GroupCode = string.Empty;
                GroupModel.GroupDesc = string.Empty;
                Initialize(1);
                uiSaveModal.CloseModal();
            }
            else
                isLoading = false;
        }
    }

    async Task OnClickPrint()
    {
        string token = await GetAuth();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        isLoading = true;
        var result = await GroupServices.PrintReport();
        var obj = new ReturnGenericStatus() { StatusCode = result.StatusCode, StatusMessage = result.StatusMessage };
        Msg.ShowMsg(obj);
        if (result.StatusCode == "00")
        {
            string base64Data = result.Data.PdfDataBase64.Trim('"');
            await JSRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64Data, result.Data.FileName);
        }
        else
            isLoading = false;
    }

    async Task OnClickPrintMatrix()
    {
        isLoading = true;
        string token = await GetAuth();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var result = await GroupServices.PrintMatrix();
        var obj = new ReturnGenericStatus(){ StatusCode = result.StatusCode, StatusMessage = result.StatusMessage };
        Msg.ShowMsg(obj);
        if (result.StatusCode == "00")
        {
            string base64Data = result.Data.PdfDataBase64.Trim('"');
            await JSRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64Data, result.Data.FileName);
        }
        else
            isLoading = false;
    }

    private async Task<string> GetAuth()
    {
        return await localStorageService.GetItemAsStringAsync("auth")!;
    }
}
