@page "/group-member/edit/{Id}"
@using Application.Models
@using WebAPI
@using NetcodeHub.Packages.Components.Validations.OnInput

<h3>Group Member Edit</h3>

<EditForm Model="GroupMemberData" OnValidSubmit="Submit">
    <div>
        <div class="col-lg-6">
            <label for="basic-url" class="form-label">Group</label>
            <Text @bind-Value="GroupMemberData.GroupDesc" Label="Group" Type="text" class="form-control" disabled="true" />
        </div>
    </div>
    <div class="mt-3">
        <label for="basic-url" class="form-label">Menu Access</label>
        @foreach (SelectListItem x in MenuList)
        {
            <div class="col-sm-6">
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="x.IsChecked" name="SelectedActions" />
                    <label class="form-check-label" for="@x.Value">
                        @x.Text
                    </label>
                </div>
            </div>
        }
    </div>
    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>
    <div class="mt-3">
        <a class="btn btn-link" href="/group-access">Back to list</a>
    </div>
</EditForm>

<Toast @ref="Msg"></Toast>
<LoadingModal @ref="MdlLoading" IsLoading="isLoading"></LoadingModal>
@code {
    [Parameter]
    public string Id { get; set; }

    private Toast Msg { get; set; }
    private ReturnGenericStatus OutputData = new();
    private LoadingModal MdlLoading;
    private bool isLoading = false;
    GroupMemberModel GroupMemberData = new();
    List<SelectListItem> MenuList = new();

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
    }

    protected async Task Initialize()
    {
        string token = await GetAuth();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var result = await GroupMemberServices.GetGroupMember(int.Parse(Id));
        if (result.StatusCode == "00")
        {
            GroupMemberData = result.Data;
            var menu = await GroupMemberServices.GetUserTypeList();
            if (result.StatusCode == "00")
            {
                MenuList = menu.Data;
                foreach (SelectListItem x in MenuList)
                {
                    if (GroupMemberData.SelectedMemberIDs.IndexOf(x.Value) >= 0)
                    {
                        x.IsChecked = true;
                    }
                }
                StateHasChanged();
            }
            else
            {
                OutputData.StatusCode = result.StatusCode;
                OutputData.StatusMessage = result.StatusMessage;
                Msg.ShowMsg(OutputData);
            }
        }
        else
        {
            OutputData.StatusCode = result.StatusCode;
            OutputData.StatusMessage = result.StatusMessage;
            Msg.ShowMsg(OutputData);
        }
        isLoading = false;
    }

    protected async Task Submit()
    {
        GroupMemberData.SelectedMemberIDs = MenuList.Where(x => x.IsChecked).Select(x => x.Value).ToList<string>();
        string token = await GetAuth();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var result = await GroupMemberServices.GroupMemberEdit(GroupMemberData);
        OutputData.StatusMessage = result.StatusMessage;
        OutputData.StatusCode = result.StatusCode;
        Msg.ShowMsg(OutputData);
        if (result.StatusCode == "00")
        {
            await Initialize();
        }
    }

    private async Task<string> GetAuth()
    {
        return await localStorageService.GetItemAsStringAsync("auth")!;
    }
}
