@page "/user-amount-limit/{Menu}"
@using Application.Models
@using Application.Service
@using WebAPI
@using Microsoft.JSInterop

<PageTitle>UserAmountLimit</PageTitle>

<h3 class="Page-Header">UserAmountLimit List</h3>
<div>
    <div class="row">
        <div class="col-2">
            <button class="btn btn-success w-100 btn-sm" type="button" @onclick="() => Modal.CreateNew()"><i class="fa fa-plus"></i> Add</button>
        </div>
        <div class="col-2">
            <button class="btn btn-warning w-100 btn-sm" type="button" @onclick="() => PrintUserAmountLimit()"><i class="fa fa-print"></i> Print</button>
        </div>
    </div>
    <div class="table-responsive-vh">
        <table class="table table-striped table-hover table-bordered ">
            <thead>
                <tr class="table-dark">
                    <th style="width: 30%;">User ID</th>
                    <th style="width: 40%;">Amount Limit Desc</th>
                    <th style="width: 12%;">Deleted</th>
                    <th style="width: 18%;">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (UserAmountLimitList != null)
                    foreach (UserAmountLimitModel x in UserAmountLimitList)
                    {
                        <tr>
                            <td style="width: 30%;">@x.UserDisplay</td>
                            <td style="width: 40%;">@x.AmountLimitDesc</td>
                            <td style="width: 12%;"><input type="checkbox" checked="@(x.Isdeleted ?? false)" disabled /></td>
                            <td style="width: 18%;">
                                @if (!(x.Isdeleted ?? false))
                                {
                                    <button type="button" class="btn btn-sm btn-info" @onclick="() => Modal.PopulateForm(x,true)"><i class="fa fa-edit"></i></button>
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => DeleteConfirmation(x.Id)"><i class="fa fa-trash"></i></button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-sm btn-success" @onclick="() => Modal.PopulateForm(x,false)"><i class="fa fa-eye"></i></button>
                                }
                            </td>
                        </tr>
                    }
            </tbody>
        </table>
    </div>
    <UIPagination CurrentPage="page"
                  TotalPages="Paginated.TotalPages"
                  HasPreviousPage="Paginated.HasPreviousPage"
                  HasNextPage="Paginated.HasNextPage"
                  CountData="Paginated.CountData"
                  OnPageChanged="GetUserAmountLimitList" />
</div>

<CIVSUI.Pages.UserAmountLimit.CreateEditUserAmountLimit @ref="Modal" ParentPage="@this"></CIVSUI.Pages.UserAmountLimit.CreateEditUserAmountLimit>
<ConfirmationToast @ref="Confirmation"
                   ConfimationMsg="@ConfimationMsg"
                   OnConfirm="DeleteUserAmountLimit"
                   IsVisible="@IsConfirmationModalVisible">
</ConfirmationToast>
<Toast @ref="Msg"></Toast>

<LoadingModal @ref="MdlLoading" IsLoading="@isLoading"></LoadingModal>

@inject IUserAmountLimitServices UserAmountLimitService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@code {
    [Parameter]
    public string? Menu { get; set; }
    private CIVSUI.Pages.UserAmountLimit.CreateEditUserAmountLimit Modal { get; set; }
    private Toast Msg { get; set; }
    private ConfirmationToast Confirmation { get; set; }
    private bool IsConfirmationModalVisible = false;
    private string ConfimationMsg = string.Empty;
    private LoadingModal MdlLoading;
    private bool isLoading = true;
    private PaginatedOutputServices<UserAmountLimitModel> Paginated = new();
    private List<UserAmountLimitModel> UserAmountLimitList;
    private ReturnGenericStatus OutputData = new();
    private UserAmountLimitModel data;
    private string SUserAmountLimitCode;
    private int page = 1;
    private int ID;

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
    }
    protected async Task Initialize()
    {
        await GetUserAmountLimitList(page);
        StateHasChanged();
    }
    protected async Task GetUserAmountLimitList(int Page)
    {
        isLoading = true;
        page = Page;
        string token = await GetAuth();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        Paginated = await UserAmountLimitService.GetUserAmountLimitList(SUserAmountLimitCode, page);
        UserAmountLimitList = Paginated.Data;
        isLoading = false;
    } 
    public async Task<ReturnGenericStatus> SaveUserAmountLimit()
    {
        isLoading = true;
        string token = await GetAuth();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        ReturnGenericDictionary x = await UserAmountLimitService.SaveUserAmountLimit(Modal.FormData);
        OutputData.StatusMessage = x.StatusMessage;
        OutputData.StatusCode = x.StatusCode;
        Msg.ShowMsg(OutputData);
        if (OutputData.StatusCode == "00")
            await Initialize();
        else
            isLoading = false;
        return OutputData;
    }
    private void DeleteConfirmation(int id)
    {
        ConfimationMsg = "";
        ID = id;
        ConfimationMsg = "Are you sure you want to delete this?";
        IsConfirmationModalVisible = true;
    }
    protected async Task DeleteUserAmountLimit(bool IsConfirmed)
    {
        if (IsConfirmed)
        {
            isLoading = true;
            string token = await GetAuth();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            OutputData = await UserAmountLimitService.DeleteUserAmountLimit(ID);
            Msg.ShowMsg(OutputData);
            if (OutputData.StatusCode == "00")
                await Initialize();
            else
                isLoading = false;
        }
        IsConfirmationModalVisible = false;
        ID = 0;
    }
    protected async Task PrintUserAmountLimit()
    {
        string token = await GetAuth();
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        isLoading = true;
        ReturnGenericData<ReturnDownloadPDF> FileByte = await UserAmountLimitService.PrintUserAmountLimit(SUserAmountLimitCode);
        isLoading = false;
        if (FileByte.StatusCode == "00")
        {
            string base64Data = FileByte.Data.PdfDataBase64.Trim('"');
            await JSRuntime.InvokeVoidAsync("downloadFile", "application/pdf", base64Data, FileByte.Data.FileName);
        }
        else
        {
            Msg.ShowMsg(new ReturnGenericStatus { StatusCode = FileByte.StatusCode, StatusMessage = FileByte.StatusMessage });
        }
    }
    private async Task<string> GetAuth()
    {
        return await localStorageService.GetItemAsStringAsync("auth")!;
    }
}