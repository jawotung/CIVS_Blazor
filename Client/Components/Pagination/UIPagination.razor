@if(TotalPages > 0)
{
    <div class="row">
        <div class="col" style="color: gray;font-size: 12px;">
            <label style="margin-top:7px">Showing @StartPage - @EndPage of @CountData entries</label>
        </div>
        <div class="col">
            <nav class="Page navigation" aria-label="Page navigation">
                <ul class="pagination pagination-sm">
                    @if (HasPreviousPage)
                    {
                        <li class="page-item"><button class="page-link" @onclick="() => OnPageChanged.InvokeAsync(CurrentPage - 1)">Previous</button></li>
                    }
                    else
                    {
                        <li class="page-item disabled"><button class="page-link">Previous</button></li>
                    }
                    @{
                        int startPage = Math.Max(1, CurrentPage - 4);
                        int endPage = Math.Min(startPage + 4, TotalPages);
                    }

                    @if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" @onclick="() => OnPageChanged.InvokeAsync(startPage - 1)">...</a>
                        </li>
                    }
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        int pageNumber = i;
                        if (CurrentPage == i)
                        {
                            <li class="page-item active">
                                <a class="page-link">@i</a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" @onclick="() => OnPageChanged.InvokeAsync(pageNumber)">@i</a>
                            </li>
                        }
                    }
                    @if (endPage < TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" @onclick="() => OnPageChanged.InvokeAsync(endPage + 1)">...</a>
                        </li>
                    }
                    @if (HasNextPage)
                    {
                        <li class="page-item"><button class="page-link" @onclick="() => OnPageChanged.InvokeAsync(CurrentPage + 1)">Next</button></li>
                    }
                    else
                    {
                        <li class="page-item disabled"><button class="page-link">Next</button></li>
                    }
                </ul>
            </nav>
        </div>
    </div>
}


@code {
    [Parameter]
    public int CurrentPage { get; set; }
    [Parameter]
    public int TotalPages { get; set; } = 0;
    [Parameter]
    public int CountData { get; set; } = 0;

    [Parameter]
    public bool HasPreviousPage { get; set; } = false;

    [Parameter]
    public bool HasNextPage { get; set; } = false;
    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }
    public int StartPage = 0;
    public int EndPage = 0;
    protected override void OnParametersSet()
    {
        StartPage = ((CurrentPage - 1) * 10) + 1;
        EndPage = CurrentPage == TotalPages ? CountData : (CurrentPage * 10);
    }
}
